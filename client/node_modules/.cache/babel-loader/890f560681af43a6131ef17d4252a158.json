{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\brandonn\\\\Homework\\\\Projects\\\\Mediger\\\\client\\\\src\\\\pages\\\\Notes.js\";\nimport React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { Col, Row, Container } from \"../components/Grid\";\nimport Jumbotron from \"../components/Jumbotron\";\nimport DeleteBtn from \"../components/DeleteBtn\";\nimport EditBtn from \"../components/EditBtn\";\nimport NoteForm from \"../components/NoteForm\";\n\nclass Notes extends Component {\n  // When this component mounts, grab the book with the _id of this.props.match.params.id\n  // e.g. localhost:3000/books/599dcb67f0f16317844583fc\n  constructor() {\n    super();\n    this.state = {\n      notes: [],\n      patient: []\n    };\n\n    this.handleInputChange = event => {\n      const _event$target = event.target,\n            name = _event$target.name,\n            value = _event$target.value;\n      this.setState({\n        [name]: value\n      });\n    };\n\n    this.deletePatient = id => {\n      fetch(\"http://localhost:3010/api/notes/\" + id, {\n        method: 'DELETE',\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      }).then(res => this.componentDidMount()).catch(err => console.log(err));\n    };\n\n    this.editNote = id => {\n      fetch(\"http://localhost:3010/api/notes/\" + id, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          Note: this.state.Note,\n          patientID: this.props.match.params.id\n        })\n      }).then(res => this.componentDidMount()).catch(err => console.log(err));\n    };\n\n    this.state = {\n      Note: '',\n      Date: '',\n      userID: ''\n    };\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleSubmit(event) {\n    event.preventDefault();\n    console.log(this.props.match.params.id);\n    fetch(\"http://localhost:3010/api/notes/\" + this.props.match.params.id, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        Note: this.state.Note,\n        Date: this.state.Date,\n        userID: this.state.userID,\n        patientID: this.props.match.params.id\n      })\n    });\n  }\n\n  componentDidMount() {\n    console.log(this.props.match.params.id);\n    fetch(\"http://localhost:3010/api/notes/\" + this.props.match.params.id, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }).then(res => {\n      res.json().then(data => {\n        this.setState({\n          notes: data\n        });\n        console.log(this.state);\n      });\n    });\n    fetch(\"http://localhost:3010/api/patient/\" + this.props.match.params.id, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }).then(res => {\n      res.json().then(data => {\n        this.setState({\n          patient: data\n        });\n        console.log(this.state);\n      });\n    });\n  }\n\n  render() {\n    return React.createElement(Container, {\n      fluid: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111\n      },\n      __self: this\n    }, React.createElement(Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112\n      },\n      __self: this\n    }, React.createElement(Col, {\n      size: \"md-12\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113\n      },\n      __self: this\n    }, React.createElement(Jumbotron, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115\n      },\n      __self: this\n    }, this.state.patient.map(patients => React.createElement(\"p\", {\n      key: patients,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117\n      },\n      __self: this\n    }, patients.First_Name, \" \", patients.Last_Name)))))), React.createElement(Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    }, React.createElement(Col, {\n      size: \"md-10 md-offset-1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124\n      },\n      __self: this\n    }, React.createElement(\"article\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126\n      },\n      __self: this\n    }, \"Patient Notes\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128\n      },\n      __self: this\n    }), this.state.notes.map((notes, id) => React.createElement(\"p\", {\n      key: id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130\n      },\n      __self: this\n    }, notes.Note, React.createElement(DeleteBtn, {\n      onClick: () => {\n        if (window.confirm('Are you sure you wish to delete this patient?')) this.deletePatient(notes.id);\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132\n      },\n      __self: this\n    })))))), React.createElement(Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141\n      },\n      __self: this\n    }, React.createElement(Col, {\n      size: \"md-2\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142\n      },\n      __self: this\n    }, React.createElement(Link, {\n      to: \"/PatientList\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143\n      },\n      __self: this\n    }, \"\\u2190 Back to Patients\"))));\n  }\n\n}\n\nexport default Notes;","map":{"version":3,"sources":["C:/Users/brandonn/Homework/Projects/Mediger/client/src/pages/Notes.js"],"names":["React","Component","Link","Col","Row","Container","Jumbotron","DeleteBtn","EditBtn","NoteForm","Notes","constructor","state","notes","patient","handleInputChange","event","target","name","value","setState","deletePatient","id","fetch","method","headers","then","res","componentDidMount","catch","err","console","log","editNote","body","JSON","stringify","Note","patientID","props","match","params","Date","userID","handleSubmit","bind","preventDefault","json","data","render","map","patients","First_Name","Last_Name","window","confirm"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Col, Row, Container } from \"../components/Grid\";\r\nimport Jumbotron from \"../components/Jumbotron\";\r\nimport DeleteBtn from \"../components/DeleteBtn\";\r\nimport EditBtn from \"../components/EditBtn\";\r\nimport NoteForm from \"../components/NoteForm\";\r\n\r\nclass Notes extends Component {\r\n\r\n  state = {\r\n    notes: [],\r\n    patient: []\r\n  }\r\n\r\n  // When this component mounts, grab the book with the _id of this.props.match.params.id\r\n  // e.g. localhost:3000/books/599dcb67f0f16317844583fc\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      Note: '',\r\n      Date: '',\r\n      userID: ''\r\n    };\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n  }\r\n\r\nhandleInputChange = event => {\r\n  const { name, value } = event.target;\r\n  this.setState({\r\n    [name]: value\r\n  });\r\n};\r\n\r\nhandleSubmit(event) {\r\n  event.preventDefault();\r\n  console.log(this.props.match.params.id)\r\n  fetch(\"http://localhost:3010/api/notes/\" + this.props.match.params.id, {\r\n    method: 'POST',\r\n    headers: { 'Content-Type': 'application/json' },\r\n    body: JSON.stringify({\r\n      Note: this.state.Note,\r\n      Date: this.state.Date,\r\n      userID: this.state.userID,\r\n      patientID: this.props.match.params.id\r\n    })\r\n\r\n  })\r\n\r\n}\r\n\r\n  componentDidMount() {\r\n    console.log(this.props.match.params.id)\r\n    fetch(\"http://localhost:3010/api/notes/\" + this.props.match.params.id, {\r\n      method: 'GET',\r\n      headers: { 'Content-Type': 'application/json' },\r\n\r\n\r\n    }).then((res) => {\r\n      res.json().then((data) => {\r\n        this.setState({ notes: data })\r\n        console.log(this.state);\r\n      });\r\n    });\r\n\r\n\r\n    fetch(\"http://localhost:3010/api/patient/\" + this.props.match.params.id, {\r\n      method: 'GET',\r\n      headers: { 'Content-Type': 'application/json' },\r\n\r\n\r\n    }).then((res) => {\r\n      res.json().then((data) => {\r\n        this.setState({ patient: data })\r\n        console.log(this.state);\r\n\r\n      });\r\n    });\r\n\r\n  };\r\n\r\n  deletePatient = id => {\r\n    fetch(\"http://localhost:3010/api/notes/\" + id, {\r\n      method: 'DELETE',\r\n      headers: { 'Content-Type': 'application/json' },\r\n\r\n    })\r\n      .then(res => this.componentDidMount())\r\n      .catch(err => console.log(err));\r\n  };\r\n\r\n\r\n\r\n  editNote = id => {\r\n\r\n    fetch(\"http://localhost:3010/api/notes/\" + id, {\r\n      method: 'PUT',\r\n      headers: { 'Content-Type': 'application/json' },\r\n      body: JSON.stringify({\r\n        Note: this.state.Note,\r\n        patientID: this.props.match.params.id\r\n      })\r\n    })\r\n      .then(res => this.componentDidMount())\r\n      .catch(err => console.log(err));\r\n  };\r\n\r\n  render() {\r\n    return (\r\n\r\n      <Container fluid>\r\n        <Row>\r\n          <Col size=\"md-12\">\r\n            <Jumbotron>\r\n              <h1>\r\n                {this.state.patient.map(patients => (\r\n                  <p key={patients}>{patients.First_Name} {patients.Last_Name}</p>\r\n                ))}\r\n              </h1>\r\n            </Jumbotron>\r\n          </Col>\r\n        </Row>\r\n        <Row>\r\n          <Col size=\"md-10 md-offset-1\">\r\n            <article>\r\n              <h1>Patient Notes</h1>\r\n\r\n              <br></br>\r\n              {this.state.notes.map((notes, id) => (\r\n                <p key={id}>{notes.Note}\r\n\r\n                  <DeleteBtn onClick={() => { if (window.confirm('Are you sure you wish to delete this patient?')) this.deletePatient(notes.id) }} />\r\n                </p>\r\n              ))}\r\n\r\n            </article>\r\n\r\n          </Col>\r\n        </Row>\r\n\r\n        <Row>\r\n          <Col size=\"md-2\">\r\n            <Link to=\"/PatientList\">← Back to Patients</Link>\r\n          </Col>\r\n        </Row>\r\n      </Container>\r\n\r\n    );\r\n  }\r\n}\r\n\r\nexport default Notes;"]},"metadata":{},"sourceType":"module"}