{"ast":null,"code":"var _jsxFileName = \"/Users/aakratigarg/Desktop/Mediger/client/src/pages/Notes.js\";\nimport React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { Form, Button, FormGroup } from 'react-bootstrap';\nimport { Col, Row, Container } from \"../components/Grid\";\nimport Jumbotron from \"../components/Jumbotron\";\nimport DeleteBtn from \"../components/DeleteBtn\";\nimport EditBtn from \"../components/EditBtn\";\n\nclass Notes extends Component {\n  // When this component mounts, grab the book with the _id of this.props.match.params.id\n  // e.g. localhost:3000/books/599dcb67f0f16317844583fc\n  constructor() {\n    super();\n\n    this.handleInputChange = event => {\n      const _event$target = event.target,\n            name = _event$target.name,\n            value = _event$target.value;\n      this.setState({\n        [name]: value\n      });\n    };\n\n    this.deleteNote = id => {\n      fetch(\"http://localhost:3010/api/notes/\" + id, {\n        method: 'DELETE',\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      }).then(res => this.componentDidMount()).catch(err => console.log(err));\n    };\n\n    this.editNote = id => {\n      fetch(\"http://localhost:3010/api/notes/\" + id, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          Note: this.state.Note,\n          patientID: this.props.match.params.id\n        })\n      }).then(res => this.componentDidMount()).catch(err => console.log(err));\n    };\n\n    this.state = {\n      notes: [],\n      patient: [],\n      Note: '',\n      Date: '',\n      userID: ''\n    };\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleSubmit(event) {\n    event.preventDefault();\n    console.log(this.props.match.params.id);\n    fetch(\"http://localhost:3010/api/notes/\" + this.props.match.params.id, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        Note: this.state.Note,\n        Date: this.state.Date,\n        userID: this.state.userID,\n        patientID: this.props.match.params.id\n      })\n    }).then(res => this.componentDidMount()).catch(err => console.log(err));\n  }\n\n  componentDidMount() {\n    console.log(this.props.match.params.id);\n    fetch(\"http://localhost:3010/api/notes/\" + this.props.match.params.id, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }).then(res => {\n      res.json().then(data => {\n        this.setState({\n          notes: data\n        });\n        console.log(this.state);\n      });\n    });\n    fetch(\"http://localhost:3010/api/patient/\" + this.props.match.params.id, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }).then(res => {\n      res.json().then(data => {\n        this.setState({\n          patient: data\n        });\n        console.log(this.state);\n      });\n    });\n  }\n\n  render() {\n    return React.createElement(Container, {\n      fluid: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112\n      },\n      __self: this\n    }, React.createElement(Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113\n      },\n      __self: this\n    }, React.createElement(Col, {\n      size: \"md-12\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114\n      },\n      __self: this\n    }, React.createElement(Jumbotron, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    }, this.state.patient.map(patients => React.createElement(\"p\", {\n      key: patients,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    }, patients.First_Name, \" \", patients.Last_Name))), React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121\n      },\n      __self: this\n    }, \"Room Number: \", this.state.patient.map(patients => React.createElement(\"p\", {\n      key: patients,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122\n      },\n      __self: this\n    }, patients.roomID)))))), React.createElement(Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127\n      },\n      __self: this\n    }, React.createElement(Col, {\n      size: \"md-10 md-offset-1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128\n      },\n      __self: this\n    }, React.createElement(\"article\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130\n      },\n      __self: this\n    }, \"Patient Notes\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132\n      },\n      __self: this\n    }), this.state.notes.map((notes, id) => React.createElement(\"p\", {\n      key: id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134\n      },\n      __self: this\n    }, notes.Note, React.createElement(DeleteBtn, {\n      onClick: () => {\n        if (window.confirm('Are you sure you wish to delete this note?')) this.deleteNote(notes.id);\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136\n      },\n      __self: this\n    })))))), React.createElement(Form, {\n      onSubmit: this.handleSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144\n      },\n      __self: this\n    }, React.createElement(Form.Group, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145\n      },\n      __self: this\n    }, React.createElement(Form.Label, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146\n      },\n      __self: this\n    }, \"Note\"), React.createElement(Form.Control, {\n      type: \"input\",\n      name: \"Note\",\n      onChange: this.handleInputChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147\n      },\n      __self: this\n    }), React.createElement(Form.Label, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148\n      },\n      __self: this\n    }, \"Date Entered\"), React.createElement(Form.Control, {\n      type: \"input\",\n      name: \"Date\",\n      onChange: this.handleInputChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149\n      },\n      __self: this\n    }), React.createElement(Form.Label, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150\n      },\n      __self: this\n    }, \"Your ID\"), React.createElement(Form.Control, {\n      type: \"input\",\n      name: \"userID\",\n      onChange: this.handleInputChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151\n      },\n      __self: this\n    })), React.createElement(Button, {\n      variant: \"primary\",\n      type: \"submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153\n      },\n      __self: this\n    }, \"Add Note\")), React.createElement(Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157\n      },\n      __self: this\n    }, React.createElement(Col, {\n      size: \"md-2\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158\n      },\n      __self: this\n    }, React.createElement(Link, {\n      to: \"/PatientList\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159\n      },\n      __self: this\n    }, \"\\u2190 Back to Patients\"))));\n  }\n\n}\n\nexport default Notes;","map":{"version":3,"sources":["/Users/aakratigarg/Desktop/Mediger/client/src/pages/Notes.js"],"names":["React","Component","Link","Form","Button","FormGroup","Col","Row","Container","Jumbotron","DeleteBtn","EditBtn","Notes","constructor","handleInputChange","event","target","name","value","setState","deleteNote","id","fetch","method","headers","then","res","componentDidMount","catch","err","console","log","editNote","body","JSON","stringify","Note","state","patientID","props","match","params","notes","patient","Date","userID","handleSubmit","bind","preventDefault","json","data","render","map","patients","First_Name","Last_Name","roomID","window","confirm"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { Form, Button, FormGroup } from 'react-bootstrap';\nimport { Col, Row, Container } from \"../components/Grid\";\nimport Jumbotron from \"../components/Jumbotron\";\nimport DeleteBtn from \"../components/DeleteBtn\";\nimport EditBtn from \"../components/EditBtn\";\n\n\nclass Notes extends Component {\n\n\n  // When this component mounts, grab the book with the _id of this.props.match.params.id\n  // e.g. localhost:3000/books/599dcb67f0f16317844583fc\n  constructor() {\n    super();\n\n    this.state = {\n      notes: [],\n      patient: [],\n      Note: '',\n      Date: '',\n      userID: ''\n    };\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\nhandleInputChange = event => {\n  const { name, value } = event.target;\n  this.setState({\n    [name]: value\n  });\n};\n\nhandleSubmit(event) {\n  event.preventDefault();\n  console.log(this.props.match.params.id)\n  fetch(\"http://localhost:3010/api/notes/\" + this.props.match.params.id, {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify({\n      Note: this.state.Note,\n      Date: this.state.Date,\n      userID: this.state.userID,\n      patientID: this.props.match.params.id\n    })\n\n  })\n  .then(res => this.componentDidMount())\n  .catch(err => console.log(err));\n}\n\n  componentDidMount() {\n    console.log(this.props.match.params.id)\n    fetch(\"http://localhost:3010/api/notes/\" + this.props.match.params.id, {\n      method: 'GET',\n      headers: { 'Content-Type': 'application/json' },\n\n\n    }).then((res) => {\n      res.json().then((data) => {\n        this.setState({ notes: data })\n        console.log(this.state);\n      });\n    });\n\n\n    fetch(\"http://localhost:3010/api/patient/\" + this.props.match.params.id, {\n      method: 'GET',\n      headers: { 'Content-Type': 'application/json' },\n\n\n    }).then((res) => {\n      res.json().then((data) => {\n        this.setState({ patient: data })\n        console.log(this.state);\n\n      });\n    });\n\n  };\n\n  deleteNote = id => {\n    fetch(\"http://localhost:3010/api/notes/\" + id, {\n      method: 'DELETE',\n      headers: { 'Content-Type': 'application/json' },\n\n    })\n      .then(res => this.componentDidMount())\n      .catch(err => console.log(err));\n  };\n\n\n\n  editNote = id => {\n\n    fetch(\"http://localhost:3010/api/notes/\" + id, {\n      method: 'PUT',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({\n        Note: this.state.Note,\n        patientID: this.props.match.params.id\n      })\n    })\n      .then(res => this.componentDidMount())\n      .catch(err => console.log(err));\n  };\n\n  render() {\n    return (\n\n      <Container fluid>\n        <Row>\n          <Col size=\"md-12\">\n            <Jumbotron>\n            <h1>\n                                {this.state.patient.map(patients => (\n                                    <p key={patients}>{patients.First_Name} {patients.Last_Name}</p>\n                                ))}\n                            </h1>\n                            <h4>Room Number: {this.state.patient.map(patients => (\n                                    <p key={patients}>{patients.roomID}</p>\n                                ))}</h4>\n            </Jumbotron>\n          </Col>\n        </Row>\n        <Row>\n          <Col size=\"md-10 md-offset-1\">\n            <article>\n              <h1>Patient Notes</h1>\n\n              <br></br>\n              {this.state.notes.map((notes, id) => (\n                <p key={id}>{notes.Note}\n\n                  <DeleteBtn onClick={() => { if (window.confirm('Are you sure you wish to delete this note?')) this.deleteNote(notes.id) }} />\n                </p>\n              ))}\n\n            </article>\n\n          </Col>\n        </Row>\n <Form onSubmit={this.handleSubmit}>\n          <Form.Group>\n            <Form.Label>Note</Form.Label>\n            <Form.Control type=\"input\" name=\"Note\" onChange={this.handleInputChange}/>\n            <Form.Label>Date Entered</Form.Label>\n            <Form.Control type=\"input\" name=\"Date\" onChange={this.handleInputChange}/>\n            <Form.Label>Your ID</Form.Label>\n            <Form.Control type=\"input\" name=\"userID\" onChange={this.handleInputChange}/>\n          </Form.Group>\n          <Button variant=\"primary\" type=\"submit\">\n            Add Note\n    </Button>\n        </Form>\n        <Row>\n          <Col size=\"md-2\">\n            <Link to=\"/PatientList\">← Back to Patients</Link>\n          </Col>\n        </Row>\n      </Container>\n\n    );\n  }\n}\n\nexport default Notes;"]},"metadata":{},"sourceType":"module"}