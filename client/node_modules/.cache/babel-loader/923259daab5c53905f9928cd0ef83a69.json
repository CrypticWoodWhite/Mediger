{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\brandonn\\\\Homework\\\\Projects\\\\Mediger\\\\client\\\\src\\\\pages\\\\Notes.js\";\nimport React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { Col, Row, Container } from \"../components/Grid\";\nimport Jumbotron from \"../components/Jumbotron\";\nimport DeleteBtn from \"../components/DeleteBtn\";\nimport EditBtn from \"../components/EditBtn\";\n\nclass Notes extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      notes: [],\n      patient: []\n    };\n\n    this.deletePatient = id => {\n      fetch(\"http://localhost:3010/api/notes/\" + id, {\n        method: 'DELETE',\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      }).then(res => this.componentDidMount()).catch(err => console.log(err));\n    };\n\n    this.editNote = id => {\n      fetch(\"http://localhost:3010/api/notes/\" + id, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          First_Name: this.state.First_Name,\n          Last_Name: this.state.Last_Name,\n          Date_Of_Birth: this.state.Date_Of_Birth,\n          Address: this.state.Address,\n          City: this.state.City,\n          State: this.state.State,\n          Zip_Code: this.state.Zip_Code,\n          Email: this.state.Email,\n          Phone_Number: this.state.Phone_Number,\n          orgID: this.state.orgID\n        })\n      });\n      fetch(\"http://localhost:3010/api/notes/\" + id, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      }).then(res => this.componentDidMount()).catch(err => console.log(err));\n    };\n  }\n\n  // When this component mounts, grab the book with the _id of this.props.match.params.id\n  // e.g. localhost:3000/books/599dcb67f0f16317844583fc\n  componentDidMount() {\n    console.log(this.props.match.params.id);\n    fetch(\"http://localhost:3010/api/notes/\" + this.props.match.params.id, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }).then(res => {\n      res.json().then(data => {\n        this.setState({\n          notes: data\n        });\n        console.log(this.state);\n      });\n    });\n    fetch(\"http://localhost:3010/api/patient/\" + this.props.match.params.id, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }).then(res => {\n      res.json().then(data => {\n        this.setState({\n          patient: data\n        });\n        console.log(this.state);\n      });\n    });\n  }\n\n  render() {\n    return React.createElement(Container, {\n      fluid: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    }, React.createElement(Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94\n      },\n      __self: this\n    }, React.createElement(Col, {\n      size: \"md-12\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    }, React.createElement(Jumbotron, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    }, this.state.patient.map(patients => React.createElement(\"p\", {\n      key: patients,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }, patients.First_Name, \" \", patients.Last_Name)))))), React.createElement(Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    }, React.createElement(Col, {\n      size: \"md-10 md-offset-1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }, React.createElement(\"article\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    }, \"Patient Notes\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110\n      },\n      __self: this\n    }), this.state.notes.map((notes, id) => React.createElement(\"p\", {\n      key: id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112\n      },\n      __self: this\n    }, notes.Note, React.createElement(DeleteBtn, {\n      onClick: () => {\n        if (window.confirm('Are you sure you wish to delete this patient?')) this.deletePatient(notes.id);\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114\n      },\n      __self: this\n    }), React.createElement(EditBtn, {\n      onClick: () => this.editNote(notes.id),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115\n      },\n      __self: this\n    })))))), React.createElement(Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122\n      },\n      __self: this\n    }, React.createElement(Col, {\n      size: \"md-2\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    }, React.createElement(Link, {\n      to: \"/PatientList\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124\n      },\n      __self: this\n    }, \"\\u2190 Back to Patients\"))));\n  }\n\n}\n\nexport default Notes;","map":{"version":3,"sources":["C:/Users/brandonn/Homework/Projects/Mediger/client/src/pages/Notes.js"],"names":["React","Component","Link","Col","Row","Container","Jumbotron","DeleteBtn","EditBtn","Notes","state","notes","patient","deletePatient","id","fetch","method","headers","then","res","componentDidMount","catch","err","console","log","editNote","body","JSON","stringify","First_Name","Last_Name","Date_Of_Birth","Address","City","State","Zip_Code","Email","Phone_Number","orgID","props","match","params","json","data","setState","render","map","patients","Note","window","confirm"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Col, Row, Container } from \"../components/Grid\";\r\nimport Jumbotron from \"../components/Jumbotron\";\r\nimport DeleteBtn from \"../components/DeleteBtn\";\r\nimport EditBtn from \"../components/EditBtn\";\r\n\r\nclass Notes extends Component {\r\n\r\n  state = {\r\n    notes: [],\r\n    patient: []\r\n  }\r\n\r\n  // When this component mounts, grab the book with the _id of this.props.match.params.id\r\n  // e.g. localhost:3000/books/599dcb67f0f16317844583fc\r\n\r\n\r\n  componentDidMount() {\r\n    console.log(this.props.match.params.id)\r\n    fetch(\"http://localhost:3010/api/notes/\" + this.props.match.params.id, {\r\n      method: 'GET',\r\n      headers: { 'Content-Type': 'application/json' },\r\n\r\n\r\n    }).then((res) => {\r\n      res.json().then((data) => {\r\n        this.setState({ notes: data })\r\n        console.log(this.state);\r\n      });\r\n    });\r\n\r\n    \r\n    fetch(\"http://localhost:3010/api/patient/\" + this.props.match.params.id, {\r\n      method: 'GET',\r\n      headers: { 'Content-Type': 'application/json' },\r\n\r\n\r\n    }).then((res) => {\r\n      res.json().then((data) => {\r\n        this.setState({ patient: data })\r\n        console.log(this.state);\r\n\r\n      });\r\n    });\r\n\r\n  };\r\n\r\n  deletePatient = id => {\r\n    fetch(\"http://localhost:3010/api/notes/\" + id, {\r\n        method: 'DELETE',\r\n        headers: { 'Content-Type': 'application/json' },\r\n\r\n    })\r\n        .then(res => this.componentDidMount())\r\n        .catch(err => console.log(err));\r\n};\r\n\r\n\r\n\r\neditNote = id => {\r\n\r\n  fetch(\"http://localhost:3010/api/notes/\" + id, {\r\n    method: 'POST',\r\n    headers: { 'Content-Type': 'application/json' },\r\n    body: JSON.stringify({\r\n      First_Name: this.state.First_Name,\r\n      Last_Name: this.state.Last_Name,\r\n      Date_Of_Birth: this.state.Date_Of_Birth,\r\n      Address: this.state.Address,\r\n      City: this.state.City,\r\n      State: this.state.State, \r\n      Zip_Code: this.state.Zip_Code, \r\n      Email: this.state.Email, \r\n      Phone_Number: this.state.Phone_Number,\r\n      orgID: this.state.orgID\r\n\r\n    })\r\n\r\n  })\r\n  fetch(\"http://localhost:3010/api/notes/\" + id, {\r\n      method: 'PUT',\r\n      headers: { 'Content-Type': 'application/json' },\r\n\r\n  })\r\n      .then(res => this.componentDidMount())\r\n      .catch(err => console.log(err));\r\n};\r\n\r\n  render() {\r\n    return (\r\n\r\n      <Container fluid>\r\n        <Row>\r\n          <Col size=\"md-12\">\r\n            <Jumbotron>\r\n              <h1>\r\n                {this.state.patient.map(patients => (\r\n                  <p key={patients}>{patients.First_Name} {patients.Last_Name}</p>\r\n                ))}\r\n              </h1>\r\n            </Jumbotron>\r\n          </Col>\r\n        </Row>\r\n        <Row>\r\n          <Col size=\"md-10 md-offset-1\">\r\n            <article>\r\n              <h1>Patient Notes</h1>\r\n\r\n              <br></br>\r\n              {this.state.notes.map((notes, id) => (\r\n                <p key={id}>{notes.Note}\r\n                \r\n                <DeleteBtn onClick={() => { if (window.confirm('Are you sure you wish to delete this patient?')) this.deletePatient(notes.id)}} />\r\n                <EditBtn onClick={() => this.editNote(notes.id)}/>\r\n                </p>\r\n              ))}\r\n\r\n            </article>\r\n          </Col>\r\n        </Row>\r\n        <Row>\r\n          <Col size=\"md-2\">\r\n            <Link to=\"/PatientList\">← Back to Patients</Link>\r\n          </Col>\r\n        </Row>\r\n      </Container>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Notes;"]},"metadata":{},"sourceType":"module"}