{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\brandonn\\\\Homework\\\\Projects\\\\Mediger\\\\client\\\\src\\\\components\\\\NoteDiv\\\\index.js\";\nimport React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { Col, Row, Container } from \"../components/Grid\";\nimport Jumbotron from \"../components/Jumbotron\";\nimport DeleteBtn from \"../components/DeleteBtn\";\nimport EditBtn from \"../components/EditBtn\";\n\nclass NoteDiv extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      notes: [],\n      patient: []\n    };\n\n    this.deletePatient = id => {\n      fetch(\"http://localhost:3010/api/notes/\" + id, {\n        method: 'DELETE',\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      }).then(res => this.componentDidMount()).catch(err => console.log(err));\n    };\n\n    this.editNote = id => {\n      fetch(\"http://localhost:3010/api/notes/\" + id, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          Note: this.state.Note,\n          patientID: this.props.match.params.id\n        })\n      }).then(res => this.componentDidMount()).catch(err => console.log(err));\n    };\n  }\n\n  // When this component mounts, grab the book with the _id of this.props.match.params.id\n  // e.g. localhost:3000/books/599dcb67f0f16317844583fc\n  componentDidMount() {\n    console.log(this.props.match.params.id);\n    fetch(\"http://localhost:3010/api/notes/\" + this.props.match.params.id, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }).then(res => {\n      res.json().then(data => {\n        this.setState({\n          notes: data\n        });\n        console.log(this.state);\n      });\n    });\n    fetch(\"http://localhost:3010/api/patient/\" + this.props.match.params.id, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }).then(res => {\n      res.json().then(data => {\n        this.setState({\n          patient: data\n        });\n        console.log(this.state);\n      });\n    });\n  }\n\n  render() {\n    return React.createElement(Container, {\n      fluid: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }, React.createElement(Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }, React.createElement(Col, {\n      size: \"md-12\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    }, React.createElement(Jumbotron, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }, this.state.patient.map(patients => React.createElement(\"p\", {\n      key: patients,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    }, patients.First_Name, \" \", patients.Last_Name)))))), React.createElement(Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    }, React.createElement(Col, {\n      size: \"md-10 md-offset-1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    }, React.createElement(\"article\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    }, \"Patient Notes\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    }), this.state.notes.map((notes, id) => React.createElement(\"p\", {\n      key: id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    }, notes.Note, React.createElement(DeleteBtn, {\n      onClick: () => {\n        if (window.confirm('Are you sure you wish to delete this patient?')) this.deletePatient(notes.id);\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    })))))), React.createElement(Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    }, React.createElement(Col, {\n      size: \"md-2\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    }, React.createElement(Link, {\n      to: \"/PatientList\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110\n      },\n      __self: this\n    }, \"\\u2190 Back to Patients\"))));\n  }\n\n}\n\nexport default NoteDiv;","map":{"version":3,"sources":["C:/Users/brandonn/Homework/Projects/Mediger/client/src/components/NoteDiv/index.js"],"names":["React","Component","Link","Col","Row","Container","Jumbotron","DeleteBtn","EditBtn","NoteDiv","state","notes","patient","deletePatient","id","fetch","method","headers","then","res","componentDidMount","catch","err","console","log","editNote","body","JSON","stringify","Note","patientID","props","match","params","json","data","setState","render","map","patients","First_Name","Last_Name","window","confirm"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Col, Row, Container } from \"../components/Grid\";\r\nimport Jumbotron from \"../components/Jumbotron\";\r\nimport DeleteBtn from \"../components/DeleteBtn\";\r\nimport EditBtn from \"../components/EditBtn\";\r\n\r\nclass NoteDiv extends Component {\r\n\r\n  state = {\r\n    notes: [],\r\n    patient: []\r\n  }\r\n\r\n  // When this component mounts, grab the book with the _id of this.props.match.params.id\r\n  // e.g. localhost:3000/books/599dcb67f0f16317844583fc\r\n\r\n\r\n  componentDidMount() {\r\n    console.log(this.props.match.params.id)\r\n    fetch(\"http://localhost:3010/api/notes/\" + this.props.match.params.id, {\r\n      method: 'GET',\r\n      headers: { 'Content-Type': 'application/json' },\r\n\r\n\r\n    }).then((res) => {\r\n      res.json().then((data) => {\r\n        this.setState({ notes: data })\r\n        console.log(this.state);\r\n      });\r\n    });\r\n\r\n\r\n    fetch(\"http://localhost:3010/api/patient/\" + this.props.match.params.id, {\r\n      method: 'GET',\r\n      headers: { 'Content-Type': 'application/json' },\r\n\r\n\r\n    }).then((res) => {\r\n      res.json().then((data) => {\r\n        this.setState({ patient: data })\r\n        console.log(this.state);\r\n\r\n      });\r\n    });\r\n\r\n  };\r\n\r\n  deletePatient = id => {\r\n    fetch(\"http://localhost:3010/api/notes/\" + id, {\r\n      method: 'DELETE',\r\n      headers: { 'Content-Type': 'application/json' },\r\n\r\n    })\r\n      .then(res => this.componentDidMount())\r\n      .catch(err => console.log(err));\r\n  };\r\n\r\n\r\n\r\n  editNote = id => {\r\n\r\n    fetch(\"http://localhost:3010/api/notes/\" + id, {\r\n      method: 'PUT',\r\n      headers: { 'Content-Type': 'application/json' },\r\n      body: JSON.stringify({\r\n        Note: this.state.Note,\r\n        patientID: this.props.match.params.id\r\n      })\r\n    })\r\n      .then(res => this.componentDidMount())\r\n      .catch(err => console.log(err));\r\n  };\r\n\r\n  render() {\r\n    return (\r\n\r\n      <Container fluid>\r\n        <Row>\r\n          <Col size=\"md-12\">\r\n            <Jumbotron>\r\n              <h1>\r\n                {this.state.patient.map(patients => (\r\n                  <p key={patients}>{patients.First_Name} {patients.Last_Name}</p>\r\n                ))}\r\n              </h1>\r\n            </Jumbotron>\r\n          </Col>\r\n        </Row>\r\n        <Row>\r\n          <Col size=\"md-10 md-offset-1\">\r\n            <article>\r\n              <h1>Patient Notes</h1>\r\n\r\n              <br></br>\r\n              {this.state.notes.map((notes, id) => (\r\n                <p key={id}>{notes.Note}\r\n\r\n                  <DeleteBtn onClick={() => { if (window.confirm('Are you sure you wish to delete this patient?')) this.deletePatient(notes.id) }} />\r\n                </p>\r\n              ))}\r\n\r\n            </article>\r\n\r\n          </Col>\r\n        </Row>\r\n\r\n        <Row>\r\n          <Col size=\"md-2\">\r\n            <Link to=\"/PatientList\">← Back to Patients</Link>\r\n          </Col>\r\n        </Row>\r\n      </Container>\r\n    );\r\n  }\r\n}\r\n\r\nexport default NoteDiv;"]},"metadata":{},"sourceType":"module"}